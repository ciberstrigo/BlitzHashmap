package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var collectorIgnore []string
var arguments []string

const outputFileName = "compileme.bb"

func main() {
	arguments = os.Args[1:]
	fmt.Println(arguments)

	readCollectorIgnore("")

	outputfile, err2 := os.Create(outputFileName)
	if err2 != nil {
		panic(err2)
	}
	defer func() {
		if err := outputfile.Close(); err != nil {
			panic(err)
		}
	}()

	w := bufio.NewWriter(outputfile)
	w.WriteString("; This file is autogenerated by collector.go script\n\n")

	err := filepath.Walk(".",
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}

			if !isIgnored(path) && isBBFile(path) && path != outputFileName {
				w.WriteString("Include \"" + path + "\"\n")
			}

			return nil
		},
	)
	if err != nil {
		log.Println(err)
	}

	if isArg("callmain") {
		w.WriteString("\n; Script started with argument 'callmain' which means that the Main() function will be called after all Include directives.")
		w.WriteString("\n; This means that Main() function must be present in the one of the included files, otherwise it will lead to an error.")
		w.WriteString("\nMain()")
	}

	if err = w.Flush(); err != nil {
		panic(err)
	}
}

func readCollectorIgnore(filepath string) {
	if "" == filepath {
		filepath = "./.collectorIgnore"
	}

	file, err := os.Open(filepath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		collectorIgnore = append(collectorIgnore, scanner.Text())
	}
}

func isIgnored(filepath string) (ignored bool) {
	ignored = false
	for i := range collectorIgnore {
		isAsteriskFirst := "*" == string(collectorIgnore[i][0])

		if ignored = isAsteriskFirst && strings.Index(filepath, collectorIgnore[i][1:]) > -1; ignored {
			return
		}

		if ignored = 0 == strings.Index(filepath, collectorIgnore[i]); ignored {
			return
		}
	}
	return
}

func isBBFile(filepath string) (bbfile bool) {
	var bbExtension string = ".bb"
	if bbfile = strings.Index(filepath, bbExtension)+len(bbExtension) == len(filepath); bbfile {
		return
	}
	return
}

func isArg(argumentName string) (exist bool) {
	exist = false
	for i := range arguments {
		if exist = arguments[i] == argumentName; exist {
			return
		}
	}
	return
}
